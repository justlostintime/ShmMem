' Gambas class file

Export

Public Struct pthread_p
    result As Pointer
End Struct

Public Struct pthread_t
    value As Integer
End Struct

Public Struct pthread_args
    values[20] As Pointer
End Struct

Private a As New Pthread_p
Private b As Pointer = Alloc(100)
'pthread_create(pthread_t *, const pthread_attr_t *,   void * ( * )(void * ), void * );

Extern pthread_create(thread As Pthread_t, attributes As Pointer, start_routine As Pointer, arg As Pointer) As Integer In "libc:6"
Extern pthread_join(thread As Pointer, result As Pointer) As Integer In "libc:6"

Property Read Thread As Pointer Use $Thread = Null
Property Read Attribute As Pointer Use $Attribute = Null
Property Read Function_Address As Pointer Use $Function_Address = Null
Property Read Call_Memory As ShmMem Use $Call_Memory = Null
Property Read Call_Args As Pointer Use $Call_Args = Null
Property Read result As Long Use $result = 4

Public Sub _new(SysMem As ShmMem, Ident As Variant)

    Dim R_type As Integer = TypeOf(Ident)

    Select Case R_type
        Case gb.string                                                                          ' if it is a string must be a variable name
            ident = SysMem.RealDataAddress(Ident) + 8           ' was 8 or 10string have an additional 8 bytes
        Case gb.Pointer, gb.long, gb.integer                               ' if it is integer or long then must be a virtual address
            ident = CPointer(ident)
        Default
            Error.Raise("Invalid request, must be varname or pointer, long, integer values")
    End Select

    $Function_address = ident
    $Call_memory = SysMem
    '  SysMem.Dump($Function_Address, 200)

End

Public Sub execute(Optional arg As Pointer = Null, WaitComplete As Boolean = True) As Variant

    Dim result As Integer

    $Call_Args = VarPtr(arg)
    '$Call_memory.Dump(arg, 200)                                                                                  ' Dump struct to file for debug
    result = pthread_create(VarPtr($Thread), Null, $Function_Address, arg)
    'Debug "pthread_create result=";; result
    If result <> 0 Then
        Error.Raise(Subst(("System error while creating thread &1"), System.error))
        Return
    Endif

    If WaitComplete Then result = pthread_join($Thread, b)
    'Debug "pthread_join result=";; result;; "returned value=";; Long@(b)
    Return

End

Public Sub ThreadWait() As Variant

    Dim result As Variant
    result = pthread_join($Thread, b)
    Return result

End
