' Gambas class file

''' This class represents a single Shared memory value
''' It can be created and destroyed, the value is stored in
''' Shared memory

Export

Static Public cShmValue As Integer = 29                           '' The Constant identifying this class name must not be a valid datatype integer

Public Struct AllocHeader                                                       '' Standard header
    Length As Long                                                                       '' Length including header
    Address As Pointer                                                                '' The virtual address of this block, speed pointer conversion
    Type As Integer                                                                       '' Type of memory
    {Next} As Pointer                                                                    '' null if no more in list
End Struct

'' Data Pointer for complex types
Public Struct dPointer
    Length As Long                                                                   '' Length including header
    Address As Pointer                                                           '' The virtual address of this block, speed pointer conversion
    Type As Integer                                                                  '' Type of memory
    Value As Pointer                                                                 '' The actual value for usage
End Struct

'' Value Header structure for all types
Public Struct dValue
    Length As Long                                                                  '' Length including header
    Address As Pointer                                                          '' The virtual address of this block, speed pointer conversion
    Type As Integer                                                                 '' Type of array
    {Next} As Pointer                                                              '' never really used except if free block
    bDebug As Boolean                                                         '' debug flag for this datatype
    Tag[64] As Byte                                                                  '' Tag id of Value
    RefCount As Integer                                                         '' Refrence counter to this value
    DataAddress As Pointer                                                 '' Pointer to where the memory is located

End Struct

ValueDef As DValue = Null                                                 '' the actual memory info
Private VarMem As ShmVarStorage                              '' The storage pool to used or referenced

Property Read VirtAddress As Pointer                          '' where the value header is stored
Property Value As Variant                                                  ''  read or write the value
Property Read type As Integer                                           '' the type of data
Property tag As String                                                          '' tag value
Property Read RealAddress As Pointer                           '' Return the real address of the ValueHeader
Property Read RealDataAddress As Pointer                  '' Returns a pointer to the data header structure
Property Read MemoryPool As ShmVarStorage          '' Get the memory pool this value is assigned to

' Initialize the new  class by adding it to the list of datatypes
Static Public Sub _init()

    ShmVarStorage.DefineClass("ShmValue", cShmValue)

End

'' Required for each user defined class, returns the pointer to the under laying data structure
Static Public Sub UserPtr(vvarmem As ShmVarStorage, VirtAddr As Pointer) As DValue

    If VirtAddr <= 0 Then Return Null
    Dim RealPtr As Pointer = vVarMem.RealAddress(VirtAddr)
    Return RealPtr

End
'' Static method returning a list of all Shm Values in the shared memory space

Static Public Sub list(VarStorage As Variant) As ShmValue[]

    Dim vvarmem As ShmVarStorage

    If Object.Class(VarStorage).name == "ShmMem" Then
        vVarMem = VarStorage.MyVarMem
    Else
        vVarMem = VarStorage
    Endif

    Dim Result As ShmValue[] = ShmMem.GetListType(vvarmem, cShmValue)

    Return result

End

'' Assign  this value to another variable, This is required to assign
'' shmobjects to the symbol table
Public Sub _Assign(VEntry As DPointer)

    If ValueDef = Null Then
        vEntry.value = Null                                    ' if the listhead is valid then continue
    Else
        vEntry.Value = ValueDef.Address        '  Assign this to the variable
        Inc ValueDef.RefCount
    Endif

End

'' Value may be accessed or created, VirtAddressOrTag = 0 then creat new list
''                                                                      VirtAddressOrTag = "tagname" then lookfor and return list with this tag
''                                                                       VirtAddressOrTag > 0 then return list at this virtual address
''                                                                        VarStorage = type of stream  initialize from a file
Public Sub _new(Optional VarStorage As Variant = Null, VirtAddressOrTag As Variant = 0, Tag As String = "")

    Dim pType As Integer = TypeOf(VarStorage)

    If varstorage = Null Then
        Return
    Else If ptype = gb.object And If VarStorage Is Stream Then
        Dim MyValue As ShmValue
        MyValue = Read #VarStorage As Object
        _Configure(MyValue.MemoryPool, MyValue.VirtAddress, MyValue.tag)
    Else
        _Configure(VarStorage, VirtAddressOrTag, Tag)
    Endif

End

Public Sub _configure(Optional VarStorage As Variant = Null, VirtAddressOrTag As Variant = 0, Tag As String = "")

    Dim VirtAddress As Pointer = Null
    Dim pType As Integer = TypeOf(VirtAddressOrTag)

    If Object.Class(VarStorage).name == "ShmMem" Then
        VarMem = VarStorage.MyVarMem
    Else
        VarMem = VarStorage
    Endif

    If ptype = gb.pointer Or If pType = gb.long Or If ptype = gb.integer Then
        VirtAddress = VirtAddressOrTag
    Else If ptype = gb.string Then
        VirtAddress = locateByTag(VirtAddressOrTag)
        If VirtAddress = Null Then
            Error.Raise("ShmValue: Tag name not found :" & VirtAddressOrTag)
        Endif
    Else
        Error.Raise("ShmValue new: must get tag or virtaddress, wrong data type")
    Endif

    If VirtAddress = 0 Then
        VirtAddress = VarMem.Alloc(SizeOf(dValue))
        ValueDef = varmem.RealAddress(VirtAddress)
        ValueDef.type = cShmValue
        ValueDef.tag = Byte[].FromString(tag)
    Else
        ' Dim vAddr As Pointer = locateByAddress(VirtAddress) ' causes endless loop must do here
        ' If vAddr = Null Then
        '     Error.Raise("ShmValue new: Invalid Virtual address provided")
        ' Endif
        ValueDef = VarMem.RealAddress(VirtAddress)
    Endif

    Inc ValueDef.RefCount

End

Public Sub _write(Dest As Stream)

    Write #Dest, VarMem.Signature As String
    Write #Dest, ValueDef.tag.Tostring() As String
    Write #Dest, _get() As Variant

End

Public Sub _read(Source As Stream)

    Dim sSignature As String
    Dim sTag As String
    Dim vValue As Variant
    Dim VarInfo As Shmmem

    sSignature = Read #Source As String
    varinfo = shmMem.GetMemSegment(sSignature)

    If varinfo = Null Then
        Error.Raise("ShmValue: Unable to find correct ShmMem to put value into, Needed:" & sSignature)
    Endif

    sTag = Read #Source As String

    _Configure(varinfo, 0, stag)

    vValue = Read #Source As Variant
    _put(vValue)

End

Public Sub _get() As Variant

    If ValueDef = Null Or If ValueDef.DataAddress = Null Then Return Null
    Return varmem[ValueDef.dataAddress]

End

Public Sub _put(value As Variant)

    If ValueDef = Null Then Return
    If ValueDef.DataAddress = Null Then
        ValueDef.DataAddress = VarMem.set(value)
    Else
        VarMem[ValueDef.DataAddress] = value
    Endif

End

'' system free
Public Sub _free()

    Me.free()

End

'' Free the value
Public Sub {free}()

    If shmMem.objects.count = 0 Or If valueDef = Null Then Return

    Dec ValueDef.Refcount
    ' Error "Value Test for delete @"; ValueDef.Address;; " RefCount="; ValueDef.RefCount
    If ValueDef.RefCount > 0 Then Return
    varmem.Free(ValueDef.DataAddress)
    ' Error " Value Deleting @"; ValueDef.address
    VarMem.Free(ValueDef.address)
    ValueDef = Null

End

'' Locate an array by tag name in the shared memory space
Private Sub locateByTag(tag As String) As Pointer

    Dim result As Pointer = Null

    For Each mBlock As Variant In VarMem
        If mBlock.type = CshmValue
            If mBlock.tag == tag Then
                result = mBlock.VirtAddress
                Break
            Endif
        Endif
    Next

    Return result

End

''  Locate an array by virtual address  in the shared memory space
'' used to verify that a virtual address is valid
Private Sub locateByAddress(Virt As Pointer) As Pointer

    Dim result As Pointer = Null

    For Each mBlock As Variant In VarMem
        If mBlock.type = CshmValue
            If mBlock.VirtAddress == virt Then
                result = mBlock.VirtAddress
                Break
            Endif
        Endif
    Next

    Return result

End

Private Function VirtAddress_Read() As Pointer

    If valuedef = Null Then Return Null
    Return ValueDef.address

End

Private Function Value_Read() As Variant

    Return _get()

End

Private Sub Value_Write(Value As Variant)

    _put(value)

End

Private Function type_Read() As Integer

    Return ValueDef.type

End

Private Function tag_Read() As String

    Return ValueDef.tag.tostring()

End

Private Sub tag_Write(Value As String)

    ValueDef.tag.FromString(Value)

End

Private Function RealAddress_Read() As Pointer

    Return varmem.RealAddress(ValueDef.Address)

End

Private Function RealDataAddress_Read() As Pointer

    Return varmem.RealAddress(ValueDef.DataAddress)

End

Private Function MemoryPool_Read() As ShmVarStorage

    Return VarMem

End
