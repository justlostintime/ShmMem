' Gambas class file

' Author Westwood JustLostintime
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

Export
'Fast Unsafe

Inherits ShmList

Public Struct dList                         '' A defined entry in list of objects
    Length As Long                          '' Length including header
    Address As Pointer                   '' The virtual address of this block, speed pointer conversion
    Type As Integer                         '' Type of memory
    {Next} As Pointer                      '' Next in list or head of pool
    Prev As Pointer                          '' previous in list or end of pool
    sema As Pointer                         '' The locking semephor for each list
    Global As Integer                       '' Defines if this is a global memory object or not
    bDebug As Boolean                  '' turns on or off the debug control
    Tag[64] As Byte                          '' a user text tag for this list, can be used to identify nameless queues
    RefCount As Long                      '' Number of refrences to this element
    Priority As Long                           '' Priority/Extended ID of a list element
    UsePriority As Boolean             '' Enable the use of priority ordering in the queue
    Value As Pointer                          '' Value of entry or count if pool
End Struct

Static Public cShmQueue As Integer = 26                                          ''  Static type value Assigned to this Shm class - 26
Static Public cShmQueueEntry As Integer = 27                                ''  Static type value Assigned to each entry in this queue - 27

Property Read key As Long                                                                   ''  This returns the priority
Property Read Key_Tag As String                                                       '' The content of the entry tag field

'' Convert the Virtual address to an actual list object
Static Public Sub AsObject(vvarmem As ShmVarStorage, VirtAddr As Pointer) As ShmList

    Return Object.New(vVarMem.GetTextType(cShmQueue), [vvarmem, VirtAddr])

End

Static Public Sub _init()

    ShmVarStorage.DefineClass("ShmQueue", cShmQueue)
    ShmVarStorage.DefineClass("ShmQueueEntry", cShmQueueEntry)

End

'' Push an entry onto the queue sort priorities
Public Sub Push(Value As Variant, Optional Priority As Long = 0, TagInfo As String = "QPush")

    enqueue(Value, Priority, TagInfo)

End

'' remove the highest prority element from the queue
Public Sub Pop() As Variant

    Return DeQueue()                    ' if no priority then take from top of the queue

End

Private LastIndex As Integer = 0

'' add entry onto the queue, sort by priority
Public Sub EnQueue(Value As Variant, Optional Priority As Integer = 0, TagValue As String = "")

    If priority = 0 Or If Super.listhead.UsePriority = False Then
        Me.add(value, Priority, TagValue)
        Return
    Endif

    Super.VarMem.Lock()
    SeekPriority(Priority)
    Super.Insert(LastIndex, Value, Priority, TagValue)
    Super.VarMem.Unlock()

End

'' remove entry from queue by specific priority , or highest by default
Public Sub DeQueue(Optional Priority As Integer = -1) As Variant

    Dim value As Variant

    Super.VarMem.Lock()
    If Priority = -1 Or If Super.listhead.UsePriority = False Then
        Value = Me.remove(0)
        Super.VarMem.Unlock()
        Return value
    Endif

    Dim Entry As Dlist = SeekPriority(Priority, True)
    If Not entry Then
        Value = Null
    Else
        Value = Super.remove(LastIndex)
    Endif
    Super.VarMem.Unlock()
    Return value

End

'' Find and return, the entry matching the requested priority
Private Sub SeekPriority(Priority As Integer, Optional bMatch As Boolean = False) As DList

    Dim Index As Long = 0
    Dim current As Dlist = Super.EntryPtr(Super.listhead.Next)

    While current
        If bMatch Then
            If Current.Priority = Priority Then
                Break
            Endif
        Else If current.Priority < Priority Then
            Break
        Endif

        Current = Super.EntryPtr(current.Next)
        Inc Index
    Wend

    If Index >= Super.listhead.Value Then
        Index = -1
    Endif

    LastIndex = Index
    ' Debug "Seek Index = ";; LastIndex;; "Priority = ";; Priority

    Return Current

End

'' Return true  if a specific priority exists on the queue
Public Sub Exist(Priority As Integer) As Boolean

    SeekPriority(Priority, True)
    If LastIndex = -1 Then
        Return False
    Endif

    Return True

End

'' iterate over the queue according to the priority
Public Sub _next() As Variant

    Dim ListItem As DList

    '    Dim Listof As DList = listhead

    If IsNull(Enum.Index) Then

        If Super.listhead <> Null And If Super.listhead.next <> Null And If Super.listhead.Value > 0 Then
            Enum.index = New ShmValue(Super.VarMem, 0, "foreach_" & Str(Application.id))
            ListItem = Super.EntryPtr(Super.listhead.next)
            Enum.index.value = listitem.Address
        Else
            Enum.Stop()
            Return
        Endif
    Else
        listitem = Super.EntryPtr(Enum.index.value)                                      ' now we keep the virtual address
        If ListItem.next = 0 Then
            Enum.Stop()
            Return
        Else
            ListItem = Super.EntryPtr(ListItem.next)
            Enum.Index.value = listitem.address                                                '  store the virtual address
        Endif
    Endif

    Return Super.VarMem[ListItem.value]

Catch
    Print "ShmQueue Next error ";; Error.text;; Error.where
    Print Hex(listitem.Address)

End

'' returns the index of the current entry in the queue during for each loop
Private Function key_Read() As Long

    Dim foreach As ShmValue

    If Super.listhead = Null Then Return 0
    Try foreach = New ShmValue(Super.VarMem, "foreach_" & Str(Application.id))
    If foreach = Null Then Return -1

    Dim entry As Dlist = Super.EntryPtr(foreach.value)
    Return entry.priority

End

'' returns the tag of the current entry during for each loop
Private Function Key_Tag_Read() As String

    Dim foreach As ShmValue

    If Super.listhead = Null Then Return ""
    Try foreach = New ShmValue(Super.VarMem, "foreach_" & Str(Application.id))
    If foreach = Null Then Return ""

    Dim entry As Dlist = Super.EntryPtr(foreach.value)
    Return entry.Tag.ToString()

End
