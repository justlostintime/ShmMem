' Gambas class file

' Author Westwood JustLostintime
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

Export

'Fast Unsafe
' when dumping the memory we must use a raw write mode
Extern rWrite(handle As Integer, buf As Pointer, cnt As Integer) As Integer In "libc:6" Exec "write"

Const VarMemDefault As Long = 2000000                                '' default memory size is 2 meg
Const MaxSymbolsDefault As Integer = 8000                          '' default variable memory space 8000 entries
Const TimeOutDefault As Float = 0.1                                          '' Default sem timeout

Public VarStore As ShmMemBlock                                               '' the pysical memory segment being shared
Public VarMnge As ShmManage                                                    '' the Object resposible to managing the raw memory
Public MyVarMem As ShmVarStorage                                        '' manages the actual values stored into the shared memory
Public VarStoreName As String                                                     '' The name for named memory

Public SymStore As ShmMemBlock                                               '' the Raw memory used to store the symbol table
Public Vars As ShmSymbolTable                                                    '' the object which will manage symbol table
Public SymStoreName As String                                                    '' the name of the symbol table for the named memory
Static Public PID As Integer = 0                                                       '' The pid of the application using this class
Private Local_PID As Integer = 0                                                     '' pid of the app/task class instaciating this as object

Property Read Count As Integer                                                     '' number of symbols
Property Read Max As Integer                                                         '' Max index into the list
Property Read Length As Integer                                                    '' number of entries in the list
Private $sKey As String                                                                       '' text key
Property Read Key As String                                                             '' returns the index of the current entry in for next
Property Debug As Boolean Use $bDebug                                   '' Turns on and off the Debug messages
Property DefaultDirectory As String Use $sDefaultDirectory '' the default directiry used to save and load Images and variables
Property Signature As String Use $Signature                             '' Used to reconstitute co correct object shmmem in an application
Static Public Objects As New Collection(gb.ignorecase)          '' The list of instanciations of the class
Property Read ShmObjects As Collection                                     '' returns a list of allocated memory segments

'' We need to determine if the object is a class=module or object=class instanciated object
'' This function correctly retruns the class for both objects and modules
Static Public Sub GetObjectClass(BasicObject As Object) As Class

    Dim result As Class = Object.Class(BasicObject)

    If result.Name == "class" Then
        Return BasicObject
    Else
        Return result
    Endif

End

'' Get a list Of every block Of the type
Static Public Sub GetListType(mVarmem As ShmVarStorage, itype As Integer) As Variant

    Dim ListTable As New Variant[]

    If mVarmem = Null Then Return ListTable
    For Each mBlock As Variant In mVarMem
        If mBlock.type = iType Then
            ListTable.Add(mBlock)
        Endif
    Next

    Return ListTable

End

'' Remove the Shared memory segment  by force
Static Public Sub ForceDelete(SharedName As String)

    Try shmMemBlock.ForceDelete(SharedName & "_Data")
    Try shmMemBlock.ForceDelete(SharedName & "_Symbols")
    If objects.Exist(SharedName) Then
        Dim tmpshm As Shmmem = objects[SharedName]
        If tmpshm.signature = objects["default"].signature Then
            objects.Remove("default")
            Objects.Remove(tmpshm.signature)
            If objects.count > 0 Then
                objects["default"] = objects.first
            Endif
        Endif
    Endif

End

'' Look for the correct signature and return the appropriate match
'' if not found then return the default memory object
'' return null if not found
'' Locate a shared memory block by signature as an object
'' This will be used by the _read functions in the Shm Classes to locate
'' the correct memory block in which to instantiate the shmclass
Static Public Sub GetMemSegment(sSignature As String) As ShmMem

    Dim seg As Shmmem

    If IsNull(Objects) Then Return Null
    seg = Objects["Override"]
    If seg <> Null Then
        Return seg
    Endif

    Seg = objects[sSignature]
    If seg = Null Then
        seg = objects["default"]
        If seg <> Null Then
            Error "Shmmem Warning :"; sSignature;; "not found using default";; seg.Signature
        Endif
    Endif
    Return seg

End

'' Allocate the memory and symbol table. initialize structures
Public Sub _new(Optional VarMemLength As Variant = VarMemDefault, MemName As String = "", MaxSymbols As Integer = MaxSymbolsDefault, LockTimeOut As Float = TimeOutDefault, isExecutable As Boolean = False, setPermissions As Integer = ShmMemBlock.DefaultPermissions)

    '  Print "Define memory block"
    $sDefaultDirectory = User.home &/ "vars"
    Local_PID = Application.Id

    If shmmem.PID <> Application.id Then
        ' Print "reseting Shmmem pid"
        shmMem.Objects.Clear()
        shmMem.PID = Application.id
    Endif

    If TypeOf(VarMemLength) = gb.string Then
        MemName = VarMemLength
        VarMemLength = VarMemDefault
    Endif

    'Print "Define memory block step 2"
    If MemName <> "" Then
        ' Print "Define memory block step 3 Define segment names"
        VarStoreName = Memname & "_Data"
        SymStoreName = Memname & "_Symbols"
        $Signature = MemName & ":" & Application.version

        'Print "Define memory block step 4 remove already defined by class"
        'Flush
        If Objects.Exist($Signature) Then
            Dim OldShm As ShmMem = objects[$Signature]
            Dim Default As ShmMem = objects[$Signature]

            If default.Signature = OldShm.Signature Then
                ' Print "Define memory block step 4 remove already defined by class removing"
                'Flush
                Objects.Remove("default")
                Objects.Remove($Signature)
                If Objects.count > 0 Then
                    Objects.Add(Objects.last, "default")
                Endif
                'Print "Define memory block step 4 remove already defined by class removing  completed"
                ' Flush
            Else
                'Print "Define memory block step 4 remove already defined by class removing sig only"
                'Flush
                Objects.Remove($Signature)
            Endif
            'Print "Define memory block step 5 Seg named defined"
            'Flush
        Endif

        'Print "Create memory blocks"
        'Flush

        VarStore = New ShmMemBlock(VarMemLength, VarStoreName, LockTimeOut, isExecutable, setPermissions)
        SymStore = New ShmMemBlock((ShmSymbolTable.SymbolLength() * MaxSymbols) + ShmSymbolTable.InfoLength(), SymStoreName, LockTimeOut)
        'Print "Completed memory blocks"
        'Flush
    Else
        VarStoreName = ""
        SymStoreName = ""
        $Signature = Str(Now) & ":" & Str(Timer) & ":" & Application.version
        VarStore = New ShmMemBlock(VarMemLength, MemName, LockTimeOut, isExecutable, setPermissions)
        SymStore = New ShmMemBlock((ShmSymbolTable.SymbolLength() * MaxSymbols) + ShmSymbolTable.InfoLength(), MemName, LockTimeOut)
    Endif

    VarStore.Signature = $Signature
    SymStore.Signature = $Signature

    VarMnge = New ShmManage(varStore)
    MyVarMem = New ShmVarStorage(varMnge)
    Vars = New ShmSymbolTable(symStore, MyVarMem)

    If Shmmem.Objects.count = 0 Then
        shmMem.Objects.Add(Me, "default")
    Endif

    shmMem.Objects.Add(Me, $Signature)
    'Print "Completed memory block definition"

Catch
    Print "Shm : Error creating Mem Block";; Error.text, Error.where
    Flush

End

'' Close the open shared memory cleanly as the gambas interpreter does not start at the highest level
Public Sub {Close}()

    _free()

End

'' Free the shared memory when the application closes
Public Sub _free()

    ' Check if this task owns the shared memory, the first in owns it
    If vars = Null Or If Local_PID <> Application.id Then Return

    ' the first shared memory segment can become the default memory segment
    ' as the owner is deleted of each segment the default memory segment becomes the previous
    ' block of memory
    If shmmem <> Null And If shmMem.objects <> Null And If shmMem.objects.count > 0 Then
        If shmMem.Objects.Exist("default")
            If shmMem.objects["default"].signature = $Signature Then
                shmMem.objects.Remove("default")
            Endif
        Endif
        If shmMem.Objects.Exist($Signature) Then
            shmMem.objects.Remove(Me.Signature)
        Endif
        If Not shmMem.objects.Exist("default") And If shmMem.objects.count > 0 Then
            shmMem.objects["default"] = shmMem.Objects[shmMem.objects.First]                                                       ' just assign the next one as the default
        Endif
    Endif

    If vars Then Vars._free()                                                 ' free the symbol table
    Vars = Null

    If myvarmem And If MyVarMem.IsValid Then MyVarMem._free()                       ' Value storage manger freed
    MyVarMem = Null

    varMnge = Null                                                                   ' memory block manager freed

    If symstore Then SymStore._free()                            ' free the shared symbol table, only for this task
    SymStore = Null

    If VarStore Then VarStore._free()                            'free the shared value memory block, only for this task
    varstore = Null

End

'' map the symbol names to a property entry
Public Sub _property(...) As Boolean

    Debug "Param.count ="; Param.count
    Dim result As Boolean = True
    Return result

End

'' alway create a new symbol when  not know, save value otherwise
Public Sub _unknown(...) As Variant

    If Param.count = 0 Then                        ' if there are no parameters then assume it is a read value
        Return _get(Param.name)
    Endif
    ' otherwise we have to create the value entry
    If Param[0] Is Array Then
        Dim value As ShmArray
        Value = ShmArray._convert(Me, Param[0])
        _put(Value, Param.name)
    Else
        _put(Param[0], Param.name)
    Endif

End

'' return the value of a symbol
Public Sub _get(SymName As String, ...) As Variant

    Dim result As Variant

    result = vars[SymName]
    Return result

End

'' Store a value into a symbol
Public Sub _put(value As Variant, SymName As String, ...)

    Dim params As New Variant[]

    If Param.count > 0 Then
        Dim tmpvar As Variant = vars[SymName]
        params.add(value)
        params.Insert(Param.all)
        Object.Call(tmpvar, "_put", Params)
        vars[SymName] = tmpvar
    Else
        ' otherwise we have to create the value entry
        If TypeOf(Value) = gb.object And If value Is Array Then
            Dim nvalue As ShmArray
            nValue = ShmArray._convert(Me, Value)
            vars[SymName] = nValue
        Else
            vars[SymName] = value
        Endif
    Endif

End

'' Remove Symbol from symbol table
'' notify app/tasks  waiting for symbol removal notifications
Public Sub Remove(SymName As String)

    Me.Free(SymName)

End

'' String Name then Remove a symbol from the symbol table and release all memory/values
''Virtual Address provided then free the virtual memory.
Public Sub {Free}(SymName As Variant)

    Select Case TypeOf(SymName)
        Case gb.integer, gb.pointer, gb.long, gb.Short
            MyVarMem.FreeVirt(CPointer(SymName))
        Case gb.string
            vars.remove(SymName)
    End Select

End

'' -----------------------------------------------------------------------------------
''  Read and write images and variables
'' -----------------------------------------------------------------------------------
'' Defines the default Paths/names for images and varianbls
Public Sub SetPath(filePath As String, Optional defaultBaseName As String = "", defaultExtension As String = "") As String

    Dim basename As String = File.BaseName(filePath)
    Dim Extension As String = File.Ext(filePath)
    Dim Directory As String = File.Dir(filepath)

    If directory = "" Then directory = $sDefaultDirectory
    If basename = "" Then basename = defaultBaseName
    If extension = "" Then extension = defaultExtension
    Return Directory &/ basename & IIf(extension <> "", "." & Extension, "")

End

'' Saves the symbols from the symbol table and it's value
'' Each entry in the symbol table is written to an image file
'' This does not save other values in the value storage memory
Public Sub SaveImage(Optional FileName As String = Application.name & ".image")

    Dim outfileName As String = SetPath(FileName)
    Dim outfile As File

    Try outfile = Open outfilename For Write Create
    If Error Then
        Error.propegate()
    Endif
    vars.Save(outfile)
    Close outfile

End

'' Saves a copy of a symbol and its value to a file
'' FileName sets the full path to locate the file, May only be the path
Public Sub SaveVar(VarName As String, Optional filename As String = "")

    Dim outfileName As String = SetPath(FileName, VarName, "var")
    Dim outfile As File

    Try outfile = Open outfilename For Write Create
    If Error Then
        Error.propegate()
    Endif
    vars.SaveVar(VarName, Outfile)
    Close outfile

End

'' Saves a copy of a gambas variable as asvaed ShmMem variable
'' VarName is the name to be used by ShmMem when the value is reloaded
'' Value is the value to be converted to shmMem variable
'' FileName sets the full path to locate the file, May only be the path
Public Sub SaveNativeVar(VarName As String, value As Variant, Optional filename As String = "")

    Dim outfileName As String = SetPath(FileName, VarName, "var")
    Dim outfile As File

    Try outfile = Open outfilename For Write Create
    If Error Then
        Error.propegate()
    Endif

    Write #OutFile, VarName As String
    Write #OutFile, Value As Variant

    Close outfile

End

'' Re-loads the Variables saved from the symbol table and restores its value
'' Also restore the date/time that the last change to this copy of the table
'' occured
Public Sub LoadImage(Optional FileName As String = Application.name & ".image")

    Dim infileName As String = SetPath(FileName)
    Dim infile As File

    Try infile = Open infilename For Read
    If Error Then
        Error.propegate()
    Endif
    vars.Load(infile)
    Close infile

End

'' Loads An individual Symbol and its value From a file
Public Sub LoadVar(FileName As String, Optional SymName As String = "")

    Dim infileName As String = SetPath(FileName, "", "var")
    Dim infile As File

    Try infile = Open infilename For Read
    If Error Then
        Error.Propagate()
    Endif
    vars.LoadVar(infile, SymName)
    Close infile

End

'' Returns a Virtual Address pointer to Symbols Value
Public Sub {VarPtr}(SymName As String) As Variant

    Return vars.VarPtr(SymName).value

End

'' Returns the size of memory needed to store a value
Public Sub {SizeOf}(Value As Variant) As Long

    Return MyVarMem.SizeOf(Value)

End

'' Prints a list of all Symbols and definition
Public Sub {Print}()

    Print vars.Text

End

'' print all posible information about the shared memory
Public Sub PrintAllInfo(Optional Title As String = "")

    Print "***************************************** Full Memory Info " & title & "***************************************************"
    Print Subst("Default Memory Size &1MB, Max Symbol Table entries &2, Default Timeout &3", VarMemDefault / 1024, MaxSymbolsDefault, TimeOutDefault)
    Print
    Print Vars.text
    Print
    VarMnge._Print(MyVarMem)
    Print

End

'' Print a tree formated symbol table by hash bucket(not implemented)
Public Sub PrintTree()

    Print "not implemented"

End

'' Waitfor a symbol to be created, use notify on new instead
Public Sub WaitFor(SymName As String, Optional Timeout As Float = 0) As Boolean

    Return vars.WaitFor(symname, timeout)

End

'' spin wait for a symbol to have a specific value
Public Sub WaitForValue(SymName As String, Value As Variant, Optional Timeout As Float = 0) As Boolean

    Return vars.WaitForValue(symname, Value, timeout)

End

'' spin wait for a value to change, use notify instead
Public Sub WaitValueChange(SymName As String, Value As Variant, Optional Timeout As Float = 0) As Boolean

    Return vars.WaitValueChange(symname, Value, timeout)

End

'' Get a notification whenever a new symbol is created
Public Sub NotifyOnNew(Enabled As Boolean, NotifyObject As Object, Optional NotifyFunction As String = "") As Boolean

    Return vars.NotifyOnNew(enabled, NotifyObject, NotifyFunction)

End

'' Get a notification whenever a symbol is removed from the symbol table
Public Sub NotifyOnRemove(Enabled As Boolean, NotifyObject As Object, Optional NotifyFunction As String = "") As Boolean

    Return vars.NotifyOnRemove(enabled, NotifyObject, NotifyFunction)

End

'' Create a notification Event when ever the specified variable changes
Public Sub Notify(SymName As String, NotifyObject As Object, Optional NotifyFunction As String = "", Timeout As Float = 0, Tag As String = "")

    vars.Notify(SymName, NotifyObject, NotifyFunction, TimeOut, tag)

Catch
    Print "shm Notify :";; Error.text;; Error.where

End

'' Stop recieving notification for a symbol. Info must match the original notify call exactly
Public Sub NotifyStop(SymName As String, CallObject As Object, Optional CallFunc As String = "", Optional tag As String = "")

    vars.NotifyStop(SymName, CallObject, CallFunc, tag)

End

'' iterate through the list
Public Sub _next() As Variant

    Static SymList As String[]

    If Enum.Index = Null Then
        SymList = Vars.SortedList()
        If SymList.Count = 0 Then
            Enum.Stop()
        Endif
        Enum.index = 0
    Else
        Inc Enum.Index
        If Enum.index > SymList.max Then
            Enum.Stop()
            Return
        Endif
    Endif
    $sKey = SymList[Enum.index]
    Return Vars[SymList[Enum.Index]]

End

'' return true if a symbol exists else false
Public Sub Exist(SymName As String) As Boolean

    Return Vars.Exist(SymName)

End

'' Return the number of entries in the symbol table
Private Function Count_Read() As Integer

    If IsNull(vars) Then Return 0
    Return Vars.count

End

'' retruns the max element index in the list
Private Function Max_Read() As Integer

    Return Vars.max

End

'' returns the number of elements in the symbol table
'' should be updated to return the actual entries available in the symbol table
Private Function Length_Read() As Integer

    Return vars.Count

End

'' Returns a list of all apps waiting for notification of a specific variable
Public Sub NotifyQ(symName As String) As ShmList

    If Not Vars.Exist(symname) Then
        Error.Raise("Unknown Symbol Name:" & Symname)
    Endif

    Return Vars.NotifyQ(symname)

End

'' Return the key symbol name In the For Next
Private Function Key_Read() As String

    Return $sKey

End
'' Returns the actual Physical address after traslating the Virtual pointer
'' returns the pointer to the actual data portion of the variable

Public Sub RealDataAddress(VirtAddress As Variant) As Pointer

    Dim result As Pointer

    Select Case TypeOf(VirtAddress)
        Case gb.string                 ' then it must be a variable name
            virtAddress = Me.VarPtr(VirtAddress)
            result = MyVarMem.RealDataAddress(VirtAddress)

        Case gb.pointer, gb.long, gb.int
            Result = MyVarMem.RealDataAddress(VirtAddress)

        Default
            error.Raise(("Invalid Real Address translation request"))
    End Select

    Return result

End
'' Returns the actual Physical address after traslating the Virtual pointer

Public Sub RealAddress(VirtAddress As Variant) As Pointer

    Dim result As Pointer

    Select Case TypeOf(VirtAddress)
        Case gb.string                 ' then it must be a variable name
            virtAddress = Me.VarPtr(VirtAddress)
            result = MyVarMem.RealAddress(VirtAddress)

        Case gb.pointer, gb.long, gb.int
            Result = MyVarMem.RealAddress(VirtAddress)

        Default
            error.Raise(("Invalid Real Address translation request"))
    End Select

    Return result

End

'' Allocate a block of memory
Public Sub {Alloc}(Length As Pointer) As Pointer

    Dim TheMem As Pointer

    TheMem = MyVarMem.AllocVirt(Length)
    Return TheMem

End

Private Function ShmObjects_Read() As Collection

    Return shmMem.objects

End

''  a function which may be called to dump the content of any memory area to a file
'' The default location if no name specified is the users desktop as dumpfile
Static Public Sub Dump(mPointer As Variant, IntLength As Integer, Optional Filename As String = User.home & "/Desktop/dumpfile.ghex")

    Dim mFile As File

    If File.Dir(Filename) = "" Then
        filename = User.home & "/Desktop/" & filename
    Endif
    mFile = Open filename For Write Create

    If TypeOf(mPointer) = gb.string Then
        mpointer = Me.RealAddress(mPointer)
    Endif

    rWrite(mFile.handle, mPointer, IntLength)

    Close mFile

End
