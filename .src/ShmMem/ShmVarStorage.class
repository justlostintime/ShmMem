' Gambas class file

' Author Westwood JustLostintime
' Released Under:
'  GNU GENERAL Public LICENSE
'    Version 3, 29 June 2007
'    See project license file.

Export

''' This class is responible for managing the storage and retrieval of vales to and from the Shared memory\
''' Using  the ShmManage class  interface to get and free the memory it uses to create and release values from memory\
''' This is called by the Symbol table manager or directly by the user to store a value into the shared memory\
''' Returns a virtual  pointer to the stored value.

'Fast Unsafe

Private varmem As ShmManage
Private Storage As ShmMemBlock
Static Public DefaultAlloc As Integer = 1024      '' Default increments used when allocating string and object memory
Public Const MaxArrayDims As Integer = 10       '' Max number of array dims

Public Struct AllocHeader
    Length As Long                             '' Length including header
    Address As Pointer                     '' The virtual address of this block, speed pointer conversion
    Type As Integer                            '' Type of memory
    {Next} As Pointer                         '' null if no more in list
End Struct

Public Struct dList                           '' A defined entry in list of objects
    Length As Long                            '' Length including header
    Address As Pointer                    '' The virtual address of this block, speed pointer conversion
    Type As Integer                           '' Type of memory
    {Next} As Pointer                        '' Next in list or head of pool
    Prev As Pointer                            '' previous in list or end of pool
    sema As Pointer                           '' The locking semephor for each list
    Global As Integer                         '' Defines if this is a global memory object or not
    bDebug As Boolean                    '' Turns on debugging
    Tag[64] As Byte                            '' a user text tag for this list, can be used to identify nameless queues
    RefCount As Long                       '' Number of refrences to this element
    Priority As Long                           '' in a queue this is the priority of this element or the Extended Id of a list
    UsePriority As Boolean              '' Enable the use of priority ordering in the queue
    Value As Pointer                           '' Value of entry or count if pool
End Struct

'' Array Header structure for all types
Public Struct dArray
    Length As Long                                                                  '' Length including header
    Address As Pointer                                                          '' The virtual address of this block, speed pointer conversion
    Type As Integer                                                                 '' Type of array
    {Next} As Pointer                                                              '' never really used except if free block
    dimensions[MaxArrayDims] As Long                          '' The actual dimensions of the array max 64
    DimCount As Integer                                                        '' The number of used dimentions
    Count As Integer                                                                '' The number of elements in the array
    DataAddress As Pointer                                                 '' Pointer to where the memory is located
    Sema As Pointer                                                                '' The locking sema virtual address
    bDebug As Boolean                                                          '' debug flag for this datatype
    Tag[64] As Byte                                                                  '' Tag id of array
End Struct

' Value Header structure for all types
Public Struct dValue
    Length As Long                                                                  '' Length including header
    Address As Pointer                                                          '' The virtual address of this block, speed pointer conversion
    Type As Integer                                                                 '' Type of array
    {Next} As Pointer                                                              '' never really used except if free block
    bDebug As Boolean                                                         '' debug flag for this datatype
    Tag[64] As Byte                                                                  '' Tag id of Value
    RefCount As Integer                                                         '' Refrence counter to this value
    DataAddress As Pointer                                                 '' Pointer to where the memory is located
End Struct

Public Struct dInteger
    Length As Long                            '' Length including header
    Address As Pointer                     '' The virtual address of this block, speed pointer conversion
    Type As Integer                           '' Type of memory
    Value As Integer                          '' The actual value for usage
End Struct

Public Struct dBoolean
    Length As Long                            '' Length including header
    Address As Pointer                    '' The virtual address of this block, speed pointer conversion
    Type As Integer                           '' Type of memory
    Value As Boolean                        '' The actual value for usage
End Struct

Public Struct dLong
    Length As Long                          '' Length including header
    Address As Pointer                  '' The virtual address of this block, speed pointer conversion
    Type As Integer                         '' Type of memory
    Value As Long                             '' The actual value for usage
End Struct

Public Struct dFloat
    Length As Long                          '' Length including header
    Address As Pointer                  '' The virtual address of this block, speed pointer conversion
    Type As Integer                         '' Type of memory
    Value As Float                            '' The actual value for usage
End Struct

Public Struct dbyte
    Length As Long                         '' Length including header
    Address As Pointer                 '' The virtual address of this block, speed pointer conversion
    Type As Integer                        '' Type of memory
    Value As Byte                            '' The actual value for usage
End Struct

Public Struct dShort
    Length As Long                         '' Length including header
    Address As Pointer                  '' The virtual address of this block, speed pointer conversion
    Type As Integer                        '' Type of memory
    Value As Short                          '' The actual value for usage
End Struct

Public Struct dPointer
    Length As Long                         '' Length including header
    Address As Pointer                 '' The virtual address of this block, speed pointer conversion
    Type As Integer                        '' Type of memory
    Value As Pointer                       '' The actual value for usage
End Struct

Public Struct dSingle
    Length As Long                         '' Length including header
    Address As Pointer                 '' The virtual address of this block, speed pointer conversion
    Type As Integer                        '' Type of memory
    Value As Single                         '' The actual value for usage
End Struct

Public Struct dDate
    Length As Long                         '' Length including header
    Address As Pointer                 '' The virtual address of this block, speed pointer conversion
    Type As Integer                        '' Type of memory
    Value As Date                            '' The actual value for usage
End Struct

Public Struct dStrObjInfo
    Length As Long                         '' Length including header
    Address As Pointer                  '' The virtual address of this block, speed pointer conversion
    Type As Integer                        '' Type of memory
    ObjLen As Long                         '' length of the actual string/Object
    WriteLen As Long                     '' The length of the actually written data
End Struct

Public Struct dStrObj
    Length As Long                             '' Length including header
    Address As Pointer                     '' The virtual address of this block, speed pointer conversion
    Type As Integer                            '' Type of memory
    ObjLen As Long                            '' length of the actual string/Object
    WriteLen As Long                        '' The length of the actually written data
    Value[1000000] As Byte             '' The actual value for usage assign as byte but we ref the value.data real address this is dummy
End Struct

Const StrData As Integer = 18
Const ObjData As Integer = 19
Const FreeBlock As Integer = -1

Static Public UserClasses As New Collection(gb.ignoreCase)                   '' The User defined data types by numeric value
Static Public UserClassByName As New Collection(gb.ignorecase)        '' The user types class name by name

'' This contains the text name of internal gambas data types mapped to the correct value
Static Public DataTypes As String[] = ["*Free", "*Binary", "*Boolean", "*Byte", "*Short", "*Integer", "*Long", "*Single", "*Float", "*Date", "*String",
    "", "*Pointer", "*Variant", "*Function", "*Class", "NULL", "*Object", "NotArray",
    "StringData", "ObjectData", "", "", "", ""]

Private $pKey As Pointer
Property Read Key As String                                                              '' contains the key virt address during for each
Property Read Count As Integer                                                       '' the number of variables being managed
Property Read Length As Integer                                                      '' the same as count
Property Read Max As Integer                                                           '' Highest valid Value list index
Property Debug As Boolean Use $bDebug                                    '' controls if the debug messages are printed
Property Signature As String Use $Signature                                '' The uniqueue signature of the object

'' Define a new user class for shared objects
'' Defines the text class name and the internal  class index value
'' The value must not conflict with any of the Gambas defined gb_type values
Static Public Sub DefineClass(ClassName As String, ClassIndex As Integer)

    UserClasses.Add(ClassName, ClassIndex)
    UserClassByName.Add(ClassIndex, ClassName)

End

'' Take the User defined data type as a type value and a virtual pointer
'' the the shared data structure and return a gambas object of that type
'' This is only valid for shmmem defined user classes
Public Sub AsObject(ctype As Integer, virtaddress As Pointer) As Variant

    Dim NewObject As Variant

    If Not UserClasses.Exist(Str(cType)) Then Return Null
    NewObject = Object.new(UserClasses[Str(ctype)], [Me, VirtAddress])
    Return NewObject

End

'' Return the data Type structure contained in the user defined types
Public Sub UserType(cType As Integer, virtaddress As Pointer) As Variant

    If Not UserClasses.Exist(Str(cType)) Then Return Null
    Dim userclass As Class = Classes[UserClasses[Str(ctype)]]
    Dim result As Variant
    Try result = Object.Call(userclass, "userPtr", [Me, virtaddress])
    If Error Then
        Dim errormessage As String = Error.text & ":" & Error.where
        Error.Raise("UserType : Failed finding required class function 'userPtr' : " & errormessage)
    Endif
    Return result

End

'' Return the defined class name for the shmmem user defined type
Static Public Sub GetTextType(Type As Integer) As String

    If Type > ObjData Then
        Return UserClasses[type]
    Endif
    Return Left(DataTypes[Type + 1] & Space(10), 10)

End

'' Creating this pool of variable storage for a specific memory block
Public Sub _new(mem As ShmManage)

    varmem = mem
    Storage = mem.Storage
    $Signature = mem.Signature

End

'' Clear the help pointer to the memory this
'' will force the cleanup of the memory
Public Sub _free()

    varmem = Null
    storage = Null

End

'' Allocate a simple {int,long.. etc}
'' gambas variable in the shared memory
Private Sub AllocSimpleVar() As Pointer

    Dim MyVar As Pointer

    MyVar = varmem.Alloc(0)
    If MyVar < varmem.ManagedInfo.StartOfMem Or If MyVar > varmem.ManagedInfo.EndOfMem Then
        Stop  ' this means there was a grave error in allocation
    Endif
    Return MyVar

End

'' Allocate a block of memory
Public Sub {Alloc}(Length As Long) As Pointer

    Dim MyVar As Pointer

    MyVar = varmem.Alloc(length)
    Return MyVar

End

'' Return an allocated block of memory and return
'' the virtual address within the block.
Public Sub AllocVirt(Length As Long) As Pointer

    Return Me.Alloc(Length) + SizeOf(AllocHeader)

End

'' Set the value of a variable, create a new one if VirtAddress is zero
'' These variables have no entry in the symbol table and are managed by the user
Public Sub set(value As Variant, Optional VirtAddress As Pointer = 0) As Pointer

    Dim myvar As Pointer

    If VirtAddress > 0 Then
        If $bDebug Then Print Application.id, "set ShmVarStorage.exclusive " & value & ":" & VirtAddress
        Storage.Exclusive()
        MyVar = VirtAddress
        _put(value, Myvar)
        Storage.Release()
        If $bDebug Then Print Application.id, "set ShmVarStorage.release " & value & ":" & VirtAddress
    Else
        If $bDebug Then Print Application.id, "set ShmVarStorage.exclusive " & value & ":" & VirtAddress
        MyVar = AllocSimpleVar()
        Storage.Exclusive()
        _put(value, Myvar)
        Storage.Release()
        If $bDebug Then Print Application.id, "set ShmVarStorage.release " & value & ":" & VirtAddress
    Endif
    Return myvar

End

'' Return the type of the stored value
Public Sub _getType(virtAddress As Pointer, type As Integer) As Variant

    Dim svptr As Variant

    svptr = Getpointer(type, VirtAddress)

    If VirtAddress <> svptr.Address Then
        varmem._Print()
        Error.Raise("Invalid variable address " & VirtAddress)
    Endif

    Select Case svptr.type
        Case gb.String
            Return getstring(svptr)
        Case gb.Object
            Return getObject(svptr)
        Case -1
            Return svptr.length
        Case Else
            Return svptr.value
    End Select

    Return

End

'' Return the Value stored at the provided virtual address
Public Sub _get(virtAddress As Pointer) As Variant

    Dim vptr As AllocHeader = varmem.AllocPtr(VirtAddress)

    Return _getType(VirtAddress, vptr.type)

End

'' Store a value as the specified virtual address, of the specified type
Public Sub _puttype(value As Variant, VirtAddress As Pointer, mytype As Integer)

    Dim tmpptr As Variant

    Dim vptr As Variant = Getpointer(MyType, VirtAddress)

    If VirtAddress <> vptr.Address Then
        Error.Raise("Invalid variable address " & VirtAddress)
    Endif

    If vptr.type <> MyType Then
        If vptr.type = gb.string Or If vptr.type = gb.object Then
            tmpptr = Getpointer(vptr.type, VirtAddress)
            If tmpptr.value > 0 Then
                varmem.Free(tmpptr.value)
                tmpptr.value = 0
            Endif
        Endif
        vptr.type = mytype
        vptr.value = 0
    Endif

    Select Case mytype
        Case gb.String
            tmpptr = Getpointer(vptr.type, VirtAddress)
            putstring(value, vptr)
        Case gb.Object
            tmpptr = Getpointer(vptr.type, VirtAddress)
            putObject(value, vptr)
        Case Else
            vptr.value = value
    End Select

End

'' Put a vlaue at the specivied virtual address type determined by the
'' typeof the value
Public Sub _put(value As Variant, VirtAddress As Pointer)

    _puttype(value, VirtAddress, TypeOf(value))

End

'' Put a string into memory.
Private Sub putstring(value As String, vptr As DPointer)

    Dim length As Long = (((value.Len + 1 + DefaultAlloc) / DefaultAlloc) * DefaultAlloc)

    If vptr.value > 0 Then
        Dim TmpPtr As DStrObj = GetPointer(StrData, vPtr.Value)
        If tmpptr.ObjLen < length Then
            varmem.free(vptr.Value)
            vptr.value = 0
        Endif
    Endif

    If vptr.value = 0 Then
        Dim HeadLenExtra As Long = SizeOf(DStrObjInfo) - SizeOf(AllocHeader)
        vptr.value = varmem.Alloc(length + HeadLenExtra)                      '' The String Header is 8 bytes longer
        tmpptr = GetPointer(StrData, vptr.Value)
        If tmpptr.length < length Then
            Stop
        Endif
        TmpPtr.ObjLen = length
        tmpptr.type = StrData
    Endif

    If TmpPtr.Length < DefaultAlloc Then
        Stop
    Endif

    Dim copyLen As Integer = IIf(value.len + 1 < Length, value.len + 1, length - 1)
    Dim srcstr As Byte[] = byte[].FromString(value)
    For j As Integer = 0 To srcstr.Max
        tmpptr.Value[j] = srcstr[j]
    Next
    tmpptr.Value[j] = 0
    ' strncpy(tmpptr.Value.Data, value, copyLen)
    tmpptr.WriteLen = copylen

End

'' Get a string from the memory
Private Sub getstring(vptr As DPointer) As String

    Dim tmpptr As Dstrobj = GetPointer(StrData, vptr.value)

    If tmpptr.WriteLen > 1000000 Then
        Return String@(tmpptr.Value.data)
    Else
        Return tmpptr.Value.ToString()
    Endif

End

'' Store an object into the memory.
Private Sub PutObject(value As Variant, vptr As DPointer)

    Dim length, ObjLen As Long

    If Object.Class(Value).Exist("_Assign") Then
        Object.Call(Value, "_Assign", [vPtr])
        Return
    Endif

    ObjLen = Me.SizeOf(value)
    Length = ((ObjLen + DefaultAlloc) / DefaultAlloc) * DefaultAlloc
    If vptr.value > 0 Then
        Dim tmpptr As DStrObj = GetPointer(ObjData, vptr.Value)
        If tmpptr.ObjLen < length Then
            varmem.free(vptr.Value)
            vptr.value = 0
        Endif
    Endif
    If vptr.value = 0 Then
        Dim HeadLenExtra As Long = SizeOf(DStrObjInfo) - SizeOf(AllocHeader)
        vptr.value = varmem.Alloc(length + HeadLenExtra)
        tmpptr = GetPointer(ObjData, vptr.Value)
        tmpptr.ObjLen = length
        tmpptr.type = ObjData
    Endif

    Dim mfile As File
    mfile = Memory tmpptr.Value.Data For Write
    Write #mFile, value As Object
    Close mFile
    tmpptr.writelen = ObjLen

End

'' get an object From the Memory
Private Sub getObject(vptr As DPointer) As Object

    Dim tmpptr As DStrObj = GetPointer(ObjData, vptr.Value)

    If UserClasses.Exist(tmpptr.Type) Then
        Return Object.New(UserClasses[tmpptr.type], [Me, vptr.Value])
    Endif

    Dim MyObject As Object
    Dim mfile As File
    mfile = Memory tmpptr.Value.data For Read
    Try MyObject = Read #mFile As Object
    If Error Then
        Error.Raise("Object read/Access failed:" & Error.text & Error.where)
    Endif
    Close mFile
    Return MyObject

End

'' free the value stored at the virtual address but not the
'' Value structure
Public Sub {Free}(Virtaddress As Pointer)

    Dim vptr As DPointer = GetPointer(gb.pointer, VirtAddress)
    Dim type As Integer = vptr.type

    If type = gb.string Or If type = gb.object Then
        varmem.free(vptr.value)
        vptr.value = 0
    Endif
    varmem.free(VirtAddress)

End

'' Free the complete memory used bu a stored value including the
'' header block
Public Sub FreeVirt(Virtaddress As Pointer)

    Me.Free(VirtAddress - SizeOf(AllocHeader))

End

'' Returns the real address of the Value header
Public Sub RealAddress(VirtAddress As Pointer) As Pointer

    Return varmem.RealAddress(VirtAddress)

End

'' Converts the Virtual address to a real address of the Data For the value.
Public Sub RealDataAddress(VirtAddress As Pointer) As Pointer

    Return varmem.RealDataAddress(VirtAddress)

End

'' Instanciate an object representing the value stored in memory
Public Sub Getpointer(Type As Integer, VirtAddress As Pointer) As Variant

    Dim realaddr As Pointer = varmem.RealAddress(VirtAddress)

    Select Case Type
        Case gb.Integer
            Dim sInteger As DInteger = realaddr
            Return sInteger
            'Return AllocInteger(realAddr, RealAddr, 0)
        Case gb.Long
            Dim sLong As Dlong = realAddr
            Return sLong
            'Return AllocLong(realAddr, RealAddr, 0)
        Case gb.Boolean
            Dim sBoolean As DBoolean = RealAddr
            Return sBoolean
            'Return AllocBoolean(realAddr, RealAddr, 0)
        Case gb.Byte
            Dim sByte As Dbyte = RealAddr
            Return sByte
            ' Return AllocByte(realAddr, RealAddr, 0)
        Case gb.Short
            Dim sShort As Dshort = realAddr
            Return sShort
            ' Return AllocShort(realAddr, RealAddr, 0)
        Case gb.Single
            Dim sSingle As DSingle = realAddr
            Return sSingle
            ' Return AllocSingle(realAddr, RealAddr, 0)
        Case gb.Float
            Dim sFloat As Dfloat = realAddr
            Return sFloat
            ' Return AllocFloat(realAddr, RealAddr, 0)
        Case gb.Date
            Dim sDate As Ddate = RealAddr
            Return sDate
            ' Return AllocDate(realAddr, RealAddr, 0)
        Case gb.Pointer
            Dim sPointer As Dpointer = realAddr
            Return sPointer
            ' Return AllocPointer(realAddr, RealAddr, 0)
        Case gb.String
            Dim sString As DPointer = realAddr
            Return sString
            ' Return AllocPointer(realAddr, RealAddr, 0)
        Case gb.Object
            Dim sObject As DPointer = realAddr
            Return sObject
            ' Return AllocPointer(realAddr, RealAddr, 0)
        Case StrData, ObjData
            Dim sStrObj As DStrObj = RealAddr
            Return sStrObj
            ' Return AllocStrObj(realAddr, RealAddr, 0)

        Case Else
            Dim result As Variant = UserType(type, VirtAddress)
            If result = Null Then
                Return varmem.AllocPtr(VirtAddress)
            Endif
            Return result

    End Select

End

'' Lock the value storage
Public Sub {Lock}()

    If $bDebug Then Print Application.id, "Lock ShmVarStorage.exclusive "
    varmem.Storage.Exclusive()

End

'' Unlock the Value storage
Public Sub {Unlock}()

    varmem.Storage.Release()
    If $bDebug Then Print Application.id, "UnLock ShmVarStorage.release "

End

'' Creates a virtual pointer to a memory block header
Public Sub {VarPtr}(VirtAddress As Pointer) As Variant

    Dim svptr As Variant
    Dim vptr As AllocHeader = varmem.AllocPtr(VirtAddress)

    svptr = Getpointer(vptr.type, VirtAddress)
    Return svptr

End

'' Return the actual storage required for any data type
'' objects must have a _write public function.
Static Public Sub {SizeOf}(data As Variant) As Integer

    Dim rdType As Integer = TypeOf(Data)
    Dim rdLen As Integer = 0

    Select Case rdType
        Case gb.String
            rdLen = data.len + 1   ' will record data length and terminator zero

        Case gb.Object
            rdLen = ObjectSizeOf(data)

        Case gb.Class
            Error.Raise("Sizeof(): Class type not supported")
            rdLen = 0

        Default
            rdLen = SizeOf(rdType)  ' will record data type

    End Select

    Return rdLen

End

'' Used the Objects _write function to get the size of the object
Static Private Sub ObjectSizeOf(data As Variant) As Integer

    Dim mFile As File
    Dim rdLen As Integer = 0

    mFile = Open Null For Write
    Try Write #mfile, data As Object
    If Error Then
        Error.Raise("Unable to write object to memory," & Error.text)
    Endif

    rdLen = Seek(mFile)
    Close mFile

    Return rdLen

End

'' Iterate thru the values stored in memory.\
'' Sets the key to the virtual address of the value.
Public Sub _next() As Variant

    Static aPtr As AllocHeader

    If Enum.index = Null Then
        aPtr = varmem.AllocPtr(varmem.ManagedInfo.StartOfMem)
        Enum.index = 0
    Else
        If Aptr.Address + aptr.length >= varmem.ManagedInfo.EndOfMem Then
            Enum.Stop()
            Return
        Endif
        aptr = varmem.AllocPtr(aPtr.Address + aPtr.length)
        Inc Enum.index
    Endif
    $pKey = aPtr.Address

    If UserClasses.Exist(aPtr.Type) Then
        Return Object.New(UserClasses[aptr.type], [Me, aPtr.address])
    Endif

    Return Getpointer(aPtr.type, aPtr.address)

End

Private AlreadyUsed As Collection

'' Creates a text blob Summary of the values stored in memory.
Public Sub text(VirtAddress As Pointer, Optional Indent As String = "", SetTree As Boolean = False) As String
    'ObjLen As Long                       '' length of the actual string/Object
    'WriteLen As Long                     '' The length of the actually written data
    'Value[1000000] As Byte

    Dim result As String = ""
    Dim sPtr As Variant

    Dim vptr As Variant = GetPointer(gb.long, VirtAddress)

    vptr = GetPointer(vptr.type, VirtAddress)
    If settree Then
        AlreadyUsed[vptr.address] = True

    Endif

    Result &= Indent & Subst("@&1, Len&2, &3", Hex(vptr.Address, 10), Format(vptr.Length, "########0"), Left(GetTextType(vptr.Type) & Space(15), 15))

    Select Case vptr.type
        Case FreeBlock
            Result &= ", Free Block"

        Case StrData, ObjData
            Result &= Left(vPtr.value.ToString(), 10)

        Case gb.String
            sPtr = GetPointer(StrData, vptr.value)
            If SetTree Then AlreadyUsed[sPtr.address] = True
            Result &= Subst("@&1, Blk&2, Len&3, Value=&4", Hex(sPtr.address, 10), Format(sPtr.ObjLen, "######0"), Format(sPtr.WriteLen, "######0"), Left(sPtr.value.ToString(), 10))

        Case gb.Object
            Dim MyObject As Object = getObject(vPtr)
            Dim OName As String = Object.Class(MyObject).name
            sPtr = GetPointer(StrData, vptr.value)
            If SetTree Then AlreadyUsed[sPtr.address] = True
            Result &= Subst("@&1, Blk&2, Len&3, Class=&4", Hex(sPtr.address, 10), Format(sPtr.ObjLen, "######0"), Format(sPtr.WriteLen, "######0"), OName)

        Case 0  ' binary object
            Result &= ", Defined Binary"

        Case Else
            If UserClasses.Exist(vptr.Type) Then
                Dim xObject As Variant = Object.New(UserClasses[vptr.type], [Me, vPtr.Address])
                result &= ", Value = " & Str(xObject.value)
                Dim refcount As Long
                Try refcount = xObject.refcount
                If Not Error Then
                    result &= ", RefCnt = " & Str(refcount)
                Endif
                Dim mtag As String
                Try mtag = xObject.tag
                If Not Error Then
                    result &= ", Tag = " & mtag
                Endif
            Else
                result &= ", Value = " & Str(vptr.value)
            Endif

    End Select

    Return result

End

'' Returns a pointer to a list value entry
Public Sub EntryPtr(VirtAddress As Pointer) As DList

    If VirtAddress <= 0 Then Return Null
    Dim RealPtr As Pointer = RealAddress(VirtAddress)
    ' Return DListPtr(RealPtr, RealPtr, 0)
    Return RealPtr

End

'' Returns a text blob for a structure with sub structures
Public Sub TextTree(Optional VirtAddress As Pointer = 0, Indent As Integer = 0) As String

    Dim vptr As AllocHeader
    '    Dim sIndent As String = IIf(indent > 0, "|" & Space(Indent * 2), "")
    Dim OutBuffer As String = Space(indent) & ""
    Dim theList As Variant

    If VirtAddress = 0 Then
        vptr = varmem.AllocPtr(varmem.ManagedInfo.StartOfMem)
        AlreadyUsed = New Collection
        AlreadyUsed.default = False
    Endif

    While vptr.address + vptr.length < varmem.ManagedInfo.EndOfMem

        If Not AlreadyUsed[vptr.address]
            Select Case vptr.Type

                Case ShmList.cShmList
                    thelist = New ShmList(Me, vptr.address)
                    outbuffer &= theList.TextTree()

                Case ShmQueue.cShmQueue
                    thelist = New ShmQueue(Me, vptr.address)
                    outbuffer &= theList.TextTree()

                Case gb.String

                Case gb.Object

                Case ShmList.cShmListEntry, ShmQueue.cShmQueueEntry

                Case Else
                    OutBuffer &= text(vptr.address) & "\n"
            End Select
        Endif
        If vptr.length = 0 Then Break
        vptr = varmem.AllocPtr(vptr.address + vptr.length)

    Wend
    Return OutBuffer

End

'' Gets the key for the current For each, virtual address of the value
Private Function key_Read() As String

    Return Str(CLong($pKey))

End

'' Gets the number of values stored in memory
Private Function Count_Read() As Integer

    Return varmem.ManagedInfo.BlockCount

End

'' Gets the number of values stored in memory
Private Function Length_Read() As Integer

    Return varmem.ManagedInfo.BlockCount

End

'' Gets the highest valid index into the Value array

Private Function Max_Read() As Integer

    Return varmem.ManagedInfo.BlockCount - 1

End
