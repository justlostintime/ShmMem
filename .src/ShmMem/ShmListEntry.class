' Gambas class file

' Author Westwood JustLostintime
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

Export
'Fast Unsafe

Public Struct AllocHeader           '' Standard header
    Length As Long                           '' Length including header
    Address As Pointer                   '' The virtual address of this block, speed pointer conversion
    Type As Integer                          '' Type of memory
    {Next} As Pointer                       '' null if no more in list
End Struct

Public Struct dPointer
    Length As Long                          '' Length including header
    Address As Pointer                   '' The virtual address of this block, speed pointer conversion
    Type As Integer                         '' Type of memory
    Value As Pointer                        '' The actual value for usage
End Struct

Public Struct dList                         '' A defined entry in list of objects
    Length As Long                          '' Length including header
    Address As Pointer                   '' The virtual address of this block, speed pointer conversion
    Type As Integer                         '' Type of memory
    {Next} As Pointer                      '' Next in list or head of pool
    Prev As Pointer                          '' previous in list or end of pool
    sema As Pointer                         '' The locking semephor for each list
    Global As Integer                       '' Defines if this is a global memory object or not
    bDebug As Boolean                  '' turns on or off the debug control
    Tag[64] As Byte                          '' a user text tag for this list, can be used to identify nameless queues
    RefCount As Long                      '' Number of refrences to this element
    Priority As Long                           '' in a queue this is the priority of this element or the Extended Id of a list
    UsePriority As Boolean             '' Enable the use of priority ordering in the list
    enum_counter As Long              '' Used when enumerating a list structure
    enum_listitem As Dlist               '' pointer to dlist
    Value As Pointer                         '' Value of entry or count if pool
End Struct

Private VarMem As ShmVarStorage                        '' The storage pool to be used or referenced
Private Entry As DList                                                     '' The pointer to the list
Property Value As Variant                                            '' The actual value of the entry
Property Read Address As Pointer                            '' The virtual address of the entry
Property Read Type As Integer                                   '' The Type of this block
Property Read RefCount As Long                               '' The Number of refrences
Property Priority As Long                                               '' The priority of this element
Property Debug As Boolean Use $bDebug             '' Turn on or off debugging for this entry
Property Tag As String                                                  '' user defined tag for this entry
Property Read Dlist As Dlist                                          '' get the actual dlist for this element
Property Read next As Pointer                                     '' next element
Property Read prev As Pointer                                    '' previous element

'' Convert the Virtual address to an actual list object
Static Public Sub AsObject(vvarmem As ShmVarStorage, VirtAddr As Pointer) As ShmList

    Return Object.New(vVarMem.GetTextType(ShmList.cShmListEntry), [vvarmem, VirtAddr])

End

Public Sub _new(VarStorage As Variant, Optional VirtAddress As Pointer = 0, Priority As Long = 0, tag As String = "")

    '$bDebug = True
    If Object.Class(VarStorage).name == "ShmMem" Then
        VarMem = VarStorage.MyVarMem
    Else
        VarMem = VarStorage
    Endif

    If VirtAddress = 0 Then
        NewEntry()
        entry.Priority = Priority
        entry.tag = Byte[].FromString(tag)
    Else
        Dim RealPtr As Pointer
        RealPtr = VarMem.RealAddress(VirtAddress)
        entry = RealPtr
    Endif

End

'' Free this entry on the Gambas side, check if release on the shared memside
Public Sub _free()

    Varmem = Null
    Entry = Null

End

'' Required for each user define class, returns the pointer to the under laying data structure
Static Public Sub UserPtr(vVarmem As ShmVarStorage, VirtAddr As Pointer) As Dlist

    If VirtAddr = -1 Then Return Null
    Dim RealPtr As Pointer = vVarMem.RealAddress(VirtAddr)
    Return RealPtr

End

'' free an entry - this must be called by the list head to delete the entry
'' after it is removed from the actual list. calling this before can cause
'' very bad things to happen

Public Sub FreeEntry()

    VarMem.Free(entry.value)
    VarMem.Free(entry.address)

    entry = Null

End

Public Sub NewEntry(Optional Value As Pointer = 0) As DList

    Dim NewVar As Pointer
    Dim VirtAddress As Pointer
    Dim RealAddress As Pointer

    VirtAddress = VarMem.Alloc(SizeOf(dList) - SizeOf(AllocHeader))
    RealAddress = VarMem.RealAddress(VirtAddress)

    entry = RealAddress
    Entry.type = ShmVarStorage.UserClassByName[Object.Class(Me).name]

    NewVar = VarMem.set(value)
    Entry.Value = NewVar

    Return entry

End

Public Sub _get(...) As Variant

    If entry = Null Then Return Null
    Return Value_Read()

End

Private Function Value_Read() As Variant

    Dim result As Variant

    If entry = Null Then Return Null

    If entry.value = Null Then Return Null
    If $bDebug Then Print Application.id, "Value_Read ListEntry VarMem.Lock "
    VarMem.Lock()
    Result = VarMem[entry.value]
    VarMem.Unlock()
    If $bDebug Then Print Application.id, "Value_Read ListEntry VarMem.UnLock "
    Return result

End

Public Sub _put(value As Variant, ...)

    Value_Write(value)

End

Private Sub Value_Write(Value As Variant)

    Dim newvar As Variant

    If entry = Null Then
        Error.Raise("entry -  invalid access Null address")
    Endif

    If $bDebug Then Print Application.id, "Value_Write ListEntry VarMem.Lock "
    VarMem.Lock()
    If entry.value = 0 Then
        NewVar = VarMem.set(Value)
        Entry.Value = NewVar
    Else
        VarMem[entry.value] = value
        VarMem.Unlock()
    Endif
    If $bDebug Then Print Application.id, "Value_Write ListEntry VarMem.UnLock "

End

Private Function Type_Read() As Integer

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    Return entry.Type

End

Private Function Address_Read() As Pointer

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    Return entry.Address

End

Private Function RefCount_Read() As Long

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    Return entry.RefCount

End

Private Function Tag_Read() As String

    Return Trim(entry.Tag.ToString())

End

Private Sub Tag_Write(Value As String)

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    entry.tag = Byte[].FromString(value)

End

Private Function Priority_Read() As Long

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    Return entry.Priority

End

Private Sub Priority_Write(Value As Long)

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    entry.priority = value

End

Private Function dlist_read() As DList

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    Return entry

End

Private Function next_Read() As Pointer

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    Return entry.next

End

Private Function prev_Read() As Pointer

    If entry = Null Then
        Error.Raise("Entry - Invalid access deleted entry ")
    Endif
    Return entry.prev

End
