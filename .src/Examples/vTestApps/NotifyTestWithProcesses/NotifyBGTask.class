' Gambas class file

Inherits Task
isRunning As Boolean = True
Public Vars As Shmmem = Null
Public Starttime As Float

' Public Logfile As File
' Public LogfileName As String

Public Sub main() As String

    ' LogfileName = User.home &/ "Desktop" &/ "log_" & application.id
    'logfile = Open LogFileName For Write Create

    If vars = Null Then
        Print "BG Using named memory mydata"
        Vars = New ShmMem(1128000, "mydata")
    Endif

    With vars
        Print Application.id, "BG Begins,"

        Try .Notify("Cow", Me)
        If Error Then
            Error "BG Failed to set notify request, cow "; Error.text, Error.where
        Else
            Try .Notify("Done", Me)
            If Error Then
                Error "BG Failed to set notify request, Done"; Error.text, Error.where
            Endif

        Endif

        ' Vars.PrintAllInfo("For PID " & Application.id)

        ' Print "Notify Set for 'cow'"
        '   Print #LogFile, "Notify Set for 'cow and done'"
        starttime = Now
        While isRunning
            Wait Next
        Wend

        Wait 0.03

        .NotifyStop("cow", Me)
        .NotifyStop("done", Me)

        '  Print #LogFile, "BG Task exits"

    End With
    'Close LogFile
    Return "Done"

Catch
    Print Application.id;; "BG Error =";; Error.text, Error.where
    'Print Application.id, "Logfile:"; LogFileName;; "BG Error =";; Error.text, Error.where
    'Print #Logfile, Application.id, "BG Error =";; Error.text, Error.where

End

Public Sub cow_changed(VarName As String, Value As Variant, TimedOut As Boolean)

    If TypeOf(value) = gb.string Then Return
    If value % 10000 = 0 Then
        Print Application.id;; " BG "; varname;; " = ";; Value;; " Fetched value = "; Vars!Cow;; "time for 10,000 events = "; (Now - starttime) * 100000
        starttime = Now
    Endif

End

Public Sub done_changed(VarName As String, Value As Variant, TimedOut As Boolean)

    Print Application.id;; " BG Recieved Done directive, starting exit procedure"
    isRunning = False

End
