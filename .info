#ShmBuffer

C
cShmBuffer
V
i

'The Constant identifying this class name must not be a valid datatype integer
cShmBufferEntry
V
i

'The entry in a Buffer Element index object type
Data
r
p

'Return the real address data portion of the Buffer
Length
r
l

'The Length of the Data Portion of the buffer
Count
r
l

'Returns the length of data portion of the  buffer in bytes
Fields
r
Collection

'Returns the collection of fields elements in the buffer
Dim
r
l

'count of specified dimentions  count, uses pointer to be unsigned
Bounds
r
Long[]

'return an array containg the bounds for the array, length Dim elements
SetHeadType
v
i

'The Buffer  header Class
SetEntryType
v
i

'The Buffer Entry Class
_init
M


_new
m

(Shm)ShmMem;(ElementLengthDef)v[(ArrayDef)Long[];]
'Pass in the Shared memory object where the buffer will be allocated
'Then pass in the Length of the buffer required, if not specified then it will
'be the sum of all fields allocated, which must be specified when the, buffer is created.
'Then any number of array subscripts may be specified 0..n eg [1,4,78,2]
'Example a = new ShmBuffer(MyShm,2000,[2,100]) creates a buffer with 2x100 entries of 2000 bytes
'                  a = new ShmBuffer(MyShm,[ ["Entry1":sizeof[gb.integer] , ["entry2":Sizeof(gb.Long)] ],[2000]) creates a buffer with two fields in an array of 2000 entries of that structure
'                  a = new ShmBuffer(MyShm,1000000)  creates a buffer of 1meg
Define
m

(Element)s(ElementLength)i.
'define the element must provide the offset for root array element
_free
m


_property
m
b
.
_unknown
m
v
.
_put
m

(Value)v.
'Indexes are always in the form of bytes/field elements if more that one dimension
_get
m
v
.
#ShmBufferField

C
DataType
p
i

Offset
p
p

Length
p
p

Buffer
p
ShmBuffer

Name
p
s

_new
m

(oBuffer)ShmBuffer;(Element)s(ElementOffset)p(ElementLength)i
_free
m


#ShmClass

C
'This class must be inherited if classes which will be shared between tasks/processes
'If you do not use this class as the default then your non data usage class will fail
'when you try to save of load from the shared memory database
'or you can just define the _read and _write functions in your shared object class
'Inheriting this will at least save and create a new class every time, No Data saved
classversion
C
i
1
'This must be defined for any storable class
'it is used to verify the version of a stored object
TypeToText
V
String[]

_new
m

[(LoadFrom)v]
'This is called whenever the object is created
'Can be just created no information
'Can be created from a stream
'Can be created from a pointer
_read
m

(mFile)File;
'This will find every property of the object and try
'to read from the stream for any valid properties
'Note: remember formats to a buffer ie memory stream
'      are not the same as to a file stream
_free
m


'This is called whenever the object is destroyed
_write
m

(mFile)File;
'This will find every property of the object and try to\
'write it to the output stream
'Note: remember formats to a buffer ie memory stream
'      are not the same as to a file stream
_serialize
m
i

'This will return the length of storage required by the object
_compare
m
i
(OtherObject)v
'Compares two objects and verifies if the version is the same
'it will throw an error if the object versions are not comparable
ToString
m
s

'returns a printable text representation of the object
'Does not include functions etc only data
GetObjectVersion
m
i

_convertObject
M
b
(OtherObject)v
'does the conversion to the new format and returns the new object
'returns a copy if no conversion required
#ShmFiFo
ShmList
C
cShmFiFo
V
i

cShmFiFoEntry
V
i

_init
M


_new
m


Push
m

(Value)v
Pop
m
v

#ShmFiFoEntry
ShmListEntry
C
#ShmFiLo
ShmList
C
cShmFiLo
V
i

cShmFiLoEntry
V
i

_init
M


_new
m


Push
m

(Value)v
Pop
m
v

#ShmFiLoEntry
ShmListEntry
C
#ShmList

C
'Defines the Shm datatype - list
'Lists are inherited by every other list based object
Address
r
p

'The address of the object
Type
r
i

'The type of this object
Value
r
l

'Returns the virtual address of this list
Tag
p
s

'memo tag for debug and identity purposed
cShmList
V
i

'The Constant identifying this class name must not be a valid datatype integer
cShmListEntry
V
i

'The entry in a ShmList object type
ListHead
v
dList

'Pointer to the actual list
VarMem
v
ShmVarStorage

'The storage pool to used or referenced
Key
v
l

'During iterations this will be the item count
max
r
l

'max count for iteration
count
r
l

'Count of elements in this list
Debug
p
b

'Debugging helper
AllLists
r
Variant[]

'Returns a table of all active List{types} in memory
SetHeadType
v
i

'The list header Class
SetEntryType
v
i

'The List Entry Class
_init
M


_new
m

(VarStorage)v[(VirtAddress)p(GlobalValue)b]
'Returns a new allocated list if address is 0, else returns the exsisting list at the specified address
'VarStorage is the pointer to the address to allocate the list from
'VirtAddress is the address of an exsiting list, which is returned as a listObject type
'GlobalValue is used to allow this list to be private or a global value
'Returns the list as a list
'Increments the refrence counter for this list
NewEntry
m
dList
[(Value)v]
_Free
m

[(OverRideGlobal)b]
Free
m


'Free the entire list
EntryPtr
m
dList
(VirtAddress)p
add
m

(Value)v[(TagInfo)s]
_Assign
m

(VEntry)dPointer;
AsDListList
m
DList[]

Clear
m


_get
m
v
(Index)i
_put
m

(Value)v(Index)i
insert
m

(Index)l(Value)v[(priority)i(TagInfo)s]
remove
m
v
[(Index)l]
RemoveByVirt
m
v
(VirtAddress)p
Copy
m
v

_next
m
v

textTree
m
s

#ShmListEntry

C
Address
r
p

'The virtual address of the entry
Type
r
i

'The Type of this block
Value
p
v

'The actual value of the entry
Tag
p
s

'user defined tag for this entry
RefCount
r
l

'The Number of refrences or used as a tag/priority field
Debug
p
b

'Turn on or off debugging for this entry
_new
m

(VarStorage)v[(VirtAddress)p]
NewEntry
m
dList
[(Value)v]
#ShmManage

C
Storage
v
ShmMemBlock

Length
r
l

ManagedInfo
v
InfoHeader

Count
r
l

MAX
r
l

Key
r
s

Debug
p
b

_new
m

(MemBlock)ShmMemBlock;[(CreateManagement)b]
AllocPtr
m
AllocHeader
(VirtAddress)p
RealAddress
m
p
(VirtAddress)p
'Returns a real pointer to the actual address of the allocated address block
RealDataAddress
m
p
(VirtAddress)p
Alloc
m
p
(DataLen)l
'returns a virtual memory address
_Print
m

[(vVarStorage)ShmVarStorage;]
free
m

(VirtAddress)p
_PrintFreeList
m


_PrintBlocks
m

[(vVarStorage)ShmVarStorage;]
_PrintInfo
m


DumpMem
m

(mPointer)p(IntLength)i[(Filename)s]
'a function which mat be called to dump the content of any memory area to a file
'The default location if no name specified is the users desktop as dumpfile
DumpAllMem
m


'Dump all the memory for this mem object
DumpVirt
m

(VirtAddress)p(Length)i
'Dump a section of virtual memory
_get
m
v
(Block)s
_next
m
v

#ShmMemBlock

C
name
v
s

'Name used for this memory block, blank if unnamed
length
r
l

'Length of user space
MemoryLength
v
l

'Length of actual allocated memory
MemoryBlockSize
v
l

'The size of memory used to extend this if needed
LockTimeOut
v
f

'The length of time before reporting race condition
DataAddress
v
p

'The address of memory usable by the application
DataLength
v
l

'Length of user accessable area
DefaultLength
C
l
4000000
'Default length of allocated chunk of memory 4Meg
MemoryHandle
v
i

'Handle of named shared memory segment
MemoryAddress
v
p

'Real memory address of this shared memory
BlockInfo
v
MemBlockHeader

'The information stored in the header of the memory
address
r
p

'address of user space
Debug
p
b

_print
m


ForceDelete
M

(SharedName)s
_new
m

[(SharedLength)l(SharedName)s(WaitTimeout)f]
MapMemory
m
p
(BlockSize)l
'Map a block of named or unnamed memory into the address space of the app
CreateNamedMem
m
p
[(MemName)s(MemSize)i(forceCleanup)b]
'Allocate the block of named memory right away
RemapNamed
m

(NewLength)l
'Called to have the mapped area match the actual shared area
_free
m


Exclusive
m


ExclusiveTimeout
m


Release
m


AllocChunk
m


#ShmNotify

C
'Defines the Shm datatype - list
'Lists are inherited by every other list based object
ChangeSignal
C
i
16
'Sigsys = 31, SigUSr2 = 12, sig16 is unused too
_New
m

(VariableMemory)ShmVarStorage;
'The memory block to be used for creating queues
'the shared memory queue used to store requests
'The local copy of all variables to be notified of
'This variable defines the current tasks identity
'Create a new notify queue for this symbol table
'This is called by the Symbol table to create the notify queue
_free
m


_signal
m

(sig)i
'Signal handler for user defined signal
Notify
m

(SymEntry)Symbol;(CallBack)o(CallFunc)s[(timeout)l]
'Timeout of zero means wait for ever
VarInfo_VarTimedOut
m

(VarInfo)ShmNotifyEntry;
VarInfo_VarChanged
m

(VarInfo)ShmNotifyEntry;
NotifyStop
m

(SymEntry)Symbol;
SignalEach
m

(Sym)Symbol;
'Called by the symbol table when ever a variable changes value
'This only supports variables not direct memory values
#ShmNotifyEntry

C
NotifyObject
v
o

NotifyFunc
v
s

NotifyTimeout
v
i

NotifyVar
v
Symbol

VarName
v
s

VarMemory
v
ShmVarStorage

StartTime
v
f

:VarChanged
:

(VarDef)ShmNotifyEntry;
:VarTimedOut
:

(VarDef)ShmNotifyEntry;
_new
m

(SymName)Symbol;(CallObject)o(CallFunc)s(VarMem)ShmVarStorage;[(fTimeout)l(Once)b]
'Dispatch Functions must look like
'MyChange(SymSource as ShmMem, SymName as String, Value as Variant, TimedOut as boolean)
VarTimeOut_Timer
m


NewVal
m


Dispatch
m

(Failed)b
#ShmQueue
ShmList
C
cShmQueue
V
i

cShmQueueEntry
V
i

_init
M


_new
m


Push
m

(Value)v
Pop
m
v

EnQueue
m

(Value)v[(Priority)i(TagValue)s]
DeQueue
m
v
[(Priority)i]
Exist
m
b
(Priority)i
_next
m
v

#ShmQueueEntry
ShmListEntry
C
Priority
r
l

#ShmSymbolTable

C
Count
r
i

'The number of active entries in the symbol table
Collisions
r
i

'The number of time the Hash Function Collided with used entry
SymTblMem
v
ShmMemBlock

VarMem
v
ShmVarStorage

NotifyVars
v
ShmNotify

SymMem
v
tableLayout

SymInfo
v
TableInfo

text
r
s

'Returns a printable representation of the symbol table
Length
r
i

'The number of active entries in the symbol table
Max
r
i

'The highest index that will work
Key
r
s

'The key when using for each
Default
p
v

'The default value returned when a symbol does not exist, Defaults to False
MaxSymbols
r
i

'The Max number of symbols that can be placed in the table
MaxUsedSymbols
r
i

'Highest Number Of Symbols ever used
Debug
p
b

Save
m

(OutFile)File;
WriteVar
m

(Address)l(OutFile)File;(SymName)s
SaveVar
m

(SymName)s(OutFile)File;
exist
m
b
(SymName)s
Load
m

(InFile)File;
LoadVar
m

(InFile)File;[(SymName)s]
ReadVar
m

(InFile)File;(ReqSymname)s
_put
m

(Value)v(SymName)s
SymbolLength
M
i

InfoLength
M
i

_new
m

(MemBlock)ShmMemBlock;(DataMem)ShmVarStorage;
_free
m


Clear
m


Add
m
l
(SymName)s(Value)v
'Return the slot number insert the name and change the lastupdated time
'Create a basic variable storage to go along with this symbol
'Update the virtual address of Var in the table
GetSymIndex
m
p
(Symbol)s
Remove
m

(SymName)s
_get
m
v
(SymName)s
Notify
m

(SymName)s(CallBack)o[(FuncName)s(Timeout)l]
NotifyStop
m

(SymName)s
VarPtr
m
v
(SymName)s
'Returns the Virtual Address of the symbol
Entry
m
v
(SymName)s
WaitFor
m
b
(SymName)s[(Timeout)f]
'Wait for a variable to appear with timeout
WaitForValue
m
b
(SymName)s(Value)v[(Timeout)f]
WaitValueChange
m
b
(SymName)s(Value)v[(Timeout)f]
SortedList
m
String[]

_next
m
v

#ShmVarStorage

C
DefaultAlloc
V
i

'Default increments used when allocating string and object memory
Length
r
i

UserClasses
V
Collection

UserClassByName
V
Collection

DataTypes
V
String[]

Key
r
s

Count
r
i

Max
r
i

Debug
p
b

DefineClass
M

(ClassName)s(ClassIndex)i
GetTextType
M
s
(Type)i
_new
m

(mem)ShmManage;
'Creating this pool of variable storage for a specific memory block
_free
m


Alloc
m
p
(Length)l
AllocVirt
m
p
(Length)l
set
m
p
(Value)v[(VirtAddress)p]
'set the value of a variable, create a new one if VirtAddress is zero
_put
m

(Value)v(VirtAddress)p
_getType
m
v
(VirtAddress)p(Type)i
Getpointer
m
v
(Type)i(VirtAddress)p
_get
m
v
(VirtAddress)p
_puttype
m

(Value)v(VirtAddress)p(mytype)i
Free
m

(VirtAddress)p
SizeOf
M
i
(data)v
'return the actual storage required for any data type
'objects must have a _write public function
FreeVirt
m

(VirtAddress)p
RealAddress
m
p
(VirtAddress)p
RealDataAddress
m
p
(VirtAddress)p
Lock
m


Unlock
m


VarPtr
m
v
(VirtAddress)p
text
m
s
(VirtAddress)p[(Indent)s(SetTree)b]
_next
m
v

TextTree
m
s
[(VirtAddress)p(Indent)i]
#shmMem

C
varStore
v
ShmMemBlock

'default memory size is 2 meg
'default variable memory space 8000 entries
'Default sem timeout
varMnge
v
ShmManage

MyVarMem
v
ShmVarStorage

VarStoreName
v
s

symStore
v
ShmMemBlock

vars
v
ShmSymbolTable

SymStoreName
v
s

Count
r
i

Max
r
i

Length
r
i

Key
r
s

Debug
p
b

DefaultDirectory
p
s

ForceDelete
M

(SharedName)s
'Remove the memory by force
_new
m

[(VarMemLength)l(MemName)s(MaxSymbols)i(LockTimeOut)f]
'Allocate the memory
_free
m


_property
m
b
.
_unknown
m
v
.
_get
m
v
(SymName)s.
_put
m

(value)v(SymName)s.
Free
m

(SymName)v
SetPath
m
s
(filePath)s[(defaultBaseName)s(defaultExtension)s]
'Read and write images and variables
SaveImage
m

[(FileName)s]
SaveVar
m

(VarName)s[(FileName)s]
LoadImage
m

[(FileName)s]
LoadVar
m

(FileName)s[(SymName)s]
VarPtr
m
v
(SymName)s
SizeOf
m
l
(value)v
Print
m


PrintAllInfo
m

[(Title)s]
PrintTree
m


WaitFor
m
b
(SymName)s[(Timeout)f]
WaitForValue
m
b
(SymName)s(value)v[(Timeout)f]
WaitValueChange
m
b
(SymName)s(value)v[(Timeout)f]
Notify
m

(SymName)s(NotifyObject)o[(NotifyFunction)s]
NotifyStop
m

(SymName)s
_next
m
v

Exist
m
b
(SymName)s
RealAddress
m
p
(VirtAddress)p
'Returns the actual Physical address after traslating the Virtual pointer
alloc
m
p
(Length)p
'Allocate a block of memory
